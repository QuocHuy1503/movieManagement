<h3>MovieList</h3>
@page "/movie/list"
@using BlazorApp5.Data
@using MySql.Data.MySqlClient
@inject NavigationManager NavigationManager

<PageTitle>List of Movies</PageTitle>

@if (movie == null)
    {
      <h3>Không có dữ liệu</h3>
    }
else
{
      <div class="container">
        <div class="row">
          <div class="col-12">
            <Button Type="ButtonType.Link" Color="ButtonColor.Primary" Class="mb-3" To="/movie/create">Create Movie</Button>
          </div>
        </div>
        <div class="row">
          <div class="col-12">
                <Grid TItem="Movie"
                        Class="table table-hover table-bordered table-striped"
                        DataProvider="MoviesDataProvider"
                        AllowFiltering="true"
                        AllowPaging="true"
                        PageSize="4"
                        AllowSorting="true"
                        Responsive="true">

                    <GridColumn TItem="Movie" HeaderText="Id" PropertyName="Id" SortKeySelector="item => item.Id">
                    @context.Id
                    </GridColumn>
                    <GridColumn TItem="Movie" HeaderText="Title" PropertyName="Title" SortKeySelector="item => item.Title">
                    @context.Title
                    </GridColumn>
                        <GridColumn TItem="Movie" HeaderText="Director" PropertyName="Director" SortKeySelector="item => item.Director">
                            @context.Director
                    </GridColumn>
                    <GridColumn TItem="Movie" HeaderText="Language" PropertyName="" SortKeySelector="item => item.Language">
                            @context.Language
                    </GridColumn>
                    <GridColumn TItem="Movie" HeaderText="Age" PropertyName="" SortKeySelector="item => item.AgeId">
                        @{
                            try
                            {
                                string SqlGetBrand = String.Format($"SELECT * FROM ages WHERE id = {context.AgeId}");
                                MySqlConnection conn1 = DBMySQLUltils.GetMySqlConnection();
                                MySqlCommand cmd1 = conn1.CreateCommand();
                                conn1.Open();
                                cmd1.CommandText = SqlGetBrand;
                                MySqlDataReader mySqlDataReader1 = cmd1.ExecuteReader();
                                while (mySqlDataReader1.Read())
                                {
                                    ageId = mySqlDataReader1.GetInt32("id");
                                    ageName = mySqlDataReader1.GetInt16("name");
                                }
                                conn1.Close();
                            }
                            catch (Exception e)
                            {
                                Console.WriteLine(e.Message);
                            }
                        }
                        @if ( ageName != null && context.AgeId != 0)
                        {
                            @ageName
                        }
                    </GridColumn>
                    <GridColumn TItem="Movie" HeaderText="Image" PropertyName="" SortKeySelector="item => item.Image">
                        <img src="@context.Image" style="width:250px;height:150px"/>
                    </GridColumn>
                    <GridColumn TItem="Movie" HeaderText="Status" PropertyName="Title" SortKeySelector="item => item.Status">

                        @if (context.Status == 1)
                        {
                            <Badge Color="BadgeColor.Success" IndicatorType="BadgeIndicatorType.None">Active</Badge>
                        }
                        else
                        {
                            <Badge Color="BadgeColor.Danger" IndicatorType="BadgeIndicatorType.None">Deleted</Badge>
                        }
                    </GridColumn>
                    <GridColumn TItem="Movie" HeaderText="Action">
                        <Button Type="ButtonType.Link" Color="ButtonColor.Warning" Class="me-1" To=@($"/movie/edit/{@context.Id}")>Edit</Button>
                        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" @onclick="(movieId) => DeleteMovie(context.Id)">Delete</Button>
                    </GridColumn>
                </Grid>
          </div>
        </div>
      </div>
}

@code {
    public List<Movie> movie;

    private int ageId;

    private int ageName;

    protected override void OnInitialized()
    {
        movie = GetMovies();
    }

    private async Task<GridDataProviderResult<Movie>> MoviesDataProvider(GridDataProviderRequest<Movie> request)
    {
        if (movie is null) // pull movies only once for client-side filtering, sorting, and paging
            movie = GetMovies(); // call a service or an API to pull the movies

        return await Task.FromResult(request.ApplyTo(movie));
    }

    private List<Movie> GetMovies()
    {
        List<Movie> list = new List<Movie>();
        try
        {
            string sqlGetMovies = "SELECT * FROM movies ORDER BY id";
            MySqlConnection conn = DBMySQLUltils.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = sqlGetMovies;
            MySqlDataReader reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                int id = reader.GetInt32("id");
                string title = reader.GetString("title");
                string director = reader.GetString("director");
                string image = reader.GetString("image");
                string description = reader.GetString("description");
                string language = reader.GetString("language");
                int status = reader.GetInt16("status");
                int age_id = reader.GetInt16("age_id");
                Movie movie = new Movie(id, title, director, description, image,  language, status, age_id);
                list.Add(movie);
            }
            conn.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        return list;
    }

    public List<Age> getAges()
    {
        List<Age> ages = new List<Age>();
        try
        {
            string sqlGetMovies = "SELECT * FROM ages ORDER BY id";
            MySqlConnection conn = DBMySQLUltils.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = sqlGetMovies;
            MySqlDataReader reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                int id = reader.GetInt32("id");
                string name = reader.GetString("name");
                Age age = new Age(id, name);
                ages.Add(age);
            }
            conn.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        return ages;
    }

    private void DeleteMovie(int movieId)
    {
        try
        {
            string sqlDeleteMovie = $" UPDATE movies SET status = 0 WHERE id = {movieId} ";
            MySqlConnection conn = DBMySQLUltils.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = sqlDeleteMovie;
            cmd.ExecuteNonQuery();
            conn.Close();
            movie.RemoveAll(m => m.Id == movieId); // Update local list for immediate UI update
            NavigationManager.NavigateTo("/movie/list");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}