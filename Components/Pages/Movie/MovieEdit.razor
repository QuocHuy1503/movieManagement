@page "/movie/edit/{Id:int}"
@using BlazorApp5.Data
@using MySql.Data.MySqlClient
@inject NavigationManager NavigationManager


<h3>Movie Update</h3>
<div class="container">
	<EditForm Model="movie" OnValidSubmit="UpdateMovie">
		<div class="row">
			<div class="col-12">
				<DataAnnotationsValidator />
				<div class="mb-3">
					<label for="Title" class="form-label">Title</label>
					<InputText class="form-control" @bind-Value=movie.Title />
					<ValidationMessage For="() => movie.Title" />
				</div>
				<div class="mb-3">
					<label class="form-label">Director</label>
					<InputText class="form-control" @bind-Value=movie.Director />
					<ValidationMessage For="() => movie.Director" />
				</div>
				<div class="mb-3">
					<label class="form-label">Description</label>
					<InputText class="form-control" @bind-Value=movie.Description />
					<ValidationMessage For="() => movie.Director" />
				</div>
				<div class="mb-3">
					<label class="form-label">Language</label>
					<InputText class="form-control" @bind-Value=movie.Language />
					<ValidationMessage For="() => movie.Language" />
				</div>
                <div class="mb-3">
                    <label class="form-label">Age</label>
                    <InputSelect @bind-Value=movie.AgeId required class="form-control">
                        @if (ages != null)
                        {
                            foreach (var age in ages)
                            {
                                <option value="@age.Id">@age.Name</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="() => movie.AgeId" />
                </div>
			</div>
			<div class="col-12">
				<div class="mb-3">
					<label class="form-label">Status</label>
					<InputSelect @bind-Value=movie.Status class="form-control">
						<option value="1">Active</option>
						<option value="0">Deleted</option>
					</InputSelect>
					<ValidationMessage For="() => movie.Status" />
				</div>
			</div>
			<div class="col-6">
				<div class="mb-3">
					<label class="form-label">File</label>
                    <InputFile class="form-control" OnChange="HandleFileSelected"></InputFile>
					@if (ImageDataUrl != "")
					{
						<img src="@ImageDataUrl" style="max-width: 500px;" />
					}

				</div>
				<div class="mb-3">
					<Button Type="ButtonType.Submit" Color="ButtonColor.Success">Save</Button>
				</div>
			</div>
		</div>
	</EditForm>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    List<Age> ages;
    Movie movie = new Movie();
    // List<Brand> brands = new List<Brand>();

    private string ImageDataUrl = "";
    private IBrowserFile selectedFile;



    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            movie = GetMovie(Id);
            ages = await GetAgesAsync();
        }
    }

    private async Task<List<Age>> GetAgesAsync()
    {
        List<Age> ages = new List<Age>();
        try
        {
            string sqlGetAges = "SELECT * FROM ages ORDER BY id";
            MySqlConnection conn = DBMySQLUltils.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = sqlGetAges;
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
            while (mySqlDataReader.Read())
            {
                int id = mySqlDataReader.GetInt32("id");
                string name = mySqlDataReader.GetString("name");
                Age age = new Age(id, name);
                ages.Add(age);
            }
            conn.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        return ages;
    }

    public Movie GetMovie(int Id)
    {
        var conn = DBMySQLUltils.GetMySqlConnection();
        try
        {
            conn.Open();
            string sqlGetmovie = $"SELECT * FROM movies WHERE id = {Id}";
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = sqlGetmovie;
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
            if (mySqlDataReader.Read())
            {
                movie.Id = mySqlDataReader.GetInt32("id");
                movie.Title = mySqlDataReader.GetString("title");
                movie.Description = mySqlDataReader.GetString("description");
                movie.Director = mySqlDataReader.GetString("director");
                movie.Language = mySqlDataReader.GetString("language");
                movie.Image = mySqlDataReader.GetString("image");
                movie.Status = mySqlDataReader.GetInt32("status");
                movie.AgeId = mySqlDataReader.GetInt16("age_id");
                ImageDataUrl = movie.Image;
            }

            conn.Close();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        return movie;
    }

    // public void GetBrands()
    // {
    //     var conn = DBMySQLUltils.GetMySqlConnection();
    //     try
    //     {
    //         conn.Open();
    //         string sqlGetBrands = "SELECT * FROM brands";
    //         MySqlCommand cmd = conn.CreateCommand();
    //         cmd.CommandText = sqlGetBrands;
    //         MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
    //         while (mySqlDataReader.Read())
    //         {
    //             Brand br = new Brand();
    //             br.Id = mySqlDataReader.GetInt32("id");
    //             br.Name = mySqlDataReader.GetString("name");
    //             br.IsDeleted = mySqlDataReader.GetInt32("is_deleted");
    //             brands.Add(br);
    //         }

    //         conn.Close();
    //     }
    //     catch (Exception e)
    //     {
    //         Console.WriteLine(e.Message);
    //     }

    //     foreach (var br in brands)
    //     {
    //         Console.WriteLine(br.Name);
    //     }
    // }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        var resizeFile = await e.File.RequestImageFileAsync("image/jpeg", 500, 500);
        var buffer = new byte[resizeFile.Size];
        await resizeFile.OpenReadStream().ReadAsync(buffer);
        ImageDataUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
    }

    private async Task SaveImageToServer(IBrowserFile file)
    {
        if (file != null)
        {
            var FileName = file.Name;
            var folderPath = Path.Combine("wwwroot", "uploads"); //wwwroot/uploads
            var filePath = Path.Combine(folderPath, FileName); //wwwroot/uploads/...
            Directory.CreateDirectory(folderPath);
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(fileStream);
            }
            movie.Image = $"uploads/{FileName}";
        }
    }

    protected async void UpdateMovie()
    {
        await SaveImageToServer(selectedFile);
        string Title = movie.Title;
        string Description = movie.Description;
        string Director = movie.Director;
        int Status = movie.Status;
        string Language = movie.Language;
        string Image = movie.Image;
        int AgeId = movie.AgeId;
        string SqlUpdate = $"UPDATE movies SET title = '{Title}', description = '{Description}', director = '{Director}', status = '{Status}', image = '{Image}', language = '{Language}', age_id = '{AgeId}' WHERE id = '{Id}'";
        MySqlConnection conn = DBMySQLUltils.GetMySqlConnection();
        conn.Open();
        MySqlCommand cmd = new MySqlCommand(SqlUpdate, conn);
        cmd.ExecuteNonQuery();
        conn.Close();
        NavigationManager.NavigateTo("/movie/list", forceLoad: true);
    }
}