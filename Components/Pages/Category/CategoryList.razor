@page "/category/list"
@using D01K14BlazorServerApp.Data
@using MySql.Data.MySqlClient
@inject NavigationManager NavigationManager
<PageTitle>List of Category</PageTitle>
<h3>CategoryList</h3>
@if(listCategory == null)
{
    <h3>Không có dữ liệu</h3>
}
else
{
    <div class="container">
        <div class="row">
            <div col="col-12">
                <Button Type="ButtonType.Link" Color="ButtonColor.Primary" Class="mb-3" To="category/create">Create</Button>
            </div>
        </div>
        <div class="row">
            <div col="col-12">
                <Grid TItem="Category"
                      Class="table table-hover table-bordered table-striped"
                      DataProvider="CategoryDataProvider"
                      AllowFiltering="true"
                      AllowPaging="true"
                      PageSize="10"
                      AllowSorting="true"
                      Responsive="true">

                    <GridColumn TItem="Category" HeaderText="Id" PropertyName="CatId" SortKeySelector="item => item.CatId">
                        @context.CatId
                    </GridColumn>
                    <GridColumn TItem="Category" HeaderText="Name" PropertyName="CatName" SortKeySelector="item => item.CatName">
                        @context.CatName
                    </GridColumn>
                    <GridColumn TItem="Category" HeaderText="Status" PropertyName="IsDeleted" SortKeySelector="item => item.IsDeleted">
                        @if (context.IsDeleted ==  0)
                        {
                            <Badge Color="BadgeColor.Success" IndicatorType="BadgeIndicatorType.None">Active</Badge>
                        }else{
                            <Badge Color="BadgeColor.Danger" IndicatorType="BadgeIndicatorType.None">Deleted</Badge>
                        }
                    </GridColumn>
                    <GridColumn TItem="Category" HeaderText="Action">
                        <Button Type="ButtonType.Link" Color="ButtonColor.Warning" Class="me-1" To=@($"category/edit/{@context.CatId}")>Edit</Button>
                        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" @onclick="(CatId) => DeleteCategory(context.CatId)">Delete</Button>
                    </GridColumn>

                </Grid>
            </div>
        </div>
    </div>
    
}



@code {
    public List<Category> listCategory;

    protected override void OnInitialized()
    {
        listCategory = GetCategories();
    }

    private async Task<GridDataProviderResult<Category>> CategoryDataProvider(GridDataProviderRequest<Category> request)
    {
        if (listCategory is null) // pull employees only one time for client-side filtering, sorting, and paging
            listCategory = GetCategories(); // call a service or an API to pull the employees

        return await Task.FromResult(request.ApplyTo(listCategory));
    }


    private List<Category> GetCategories() {
        List<Category> list = new List<Category>();
        try{
            string SqlGetCategories = "SELECT * FROM category ORDER BY cat_id";
            MySqlConnection conn = DBMySQLUltils.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = SqlGetCategories;
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
            while(mySqlDataReader.Read())
            {
                int CatId = mySqlDataReader.GetInt32("cat_id");
                string CatName = mySqlDataReader.GetString("cat_name");
                int IsDeleted = mySqlDataReader.GetInt32("isDeleted");
                Category c = new Category(CatId, CatName, IsDeleted);
                list.Add(c);
            }
            conn.Close();
        }catch(Exception ex) {
            Console.WriteLine(ex.Message);
        }
        return list;
    }

    private void DeleteCategory(int id)
    {
        try
        {
            string SqlUpdateCategory = $"UPDATE category SET isDeleted= 1 WHERE cat_id={id}";
            MySqlConnection conn = DBMySQLUltils.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = SqlUpdateCategory;
            cmd.ExecuteNonQuery();
            conn.Close();
            NavigationManager.NavigateTo("/category/list");
        }
        catch (Exception ex)
        {

        }
    }
}